" ===========================================================================
" Doug's vimrc file.
" ===========================================================================

" Copied from /etc/share/vim/vimrc and modified.


" ===========================================================================
" General Setup
" ===========================================================================
" This line should not be removed as it ensures that various options are
" properly set to work with the Vim-related packages available in Debian.
runtime! debian.vim

" This is actually not needed: http://stackoverflow.com/a/5845583/1354930
" and will actually override `vim -C`
set nocompatible

" Source a global configuration file if available
" Do this early on so that it doesn't override any of my settings
if filereadable("/etc/vim/vimrc.local")
  source /etc/vim/vimrc.local
endif

set encoding=utf-8

" Vim5 and later versions support syntax highlighting. Uncommenting the next
" line enables syntax highlighting by default.
if has("syntax")
  syntax on
endif

" Set lots of colors :-)
set t_Co=256

" Jump to the last position when reopening a file.
"if has("autocmd")
"  au BufReadPost * if line("'\"") > 1 && line("'\"") <= line("$") | exe "normal! g'\"" | endif
"endif

" Have Vim load indentation rules and plugins according to the detected filetype.
if has("autocmd")
  filetype plugin indent on
endif

" General Config (aka: I can't think of a name to group these...)
" ===========================================================================
set showcmd		" Show (partial) command in status line.
set showmatch		" Show matching brackets.
"set autowrite		" Automatically save before commands like :next and :make
set hidden		" Hide buffers when they are abandoned
"set mouse=a		" Enable mouse usage (all modes)
set number              " Enable line numbers
set history=100		" Buffer history size
set laststatus=2	" Always display the status line.
" Show whitespace as characters.
set listchars=tab:→\ ,extends:▸,precedes:◂,eol:¬
" Use this line below if unicode isn't displaying correctly.
" set listchars=tab:>\ ,extends:>,precedes:<
set list
set wildmenu		" Use a tab-able autocomplete menu on the command bar.
set path+=**		" Have the "Find" command recursively search through subdirectories
" set cursorline	" highlight the current line. Slows things down a bit too much for me.
set lazyredraw		" Redraw only when we need to. Speeds up macros.
set visualbell		" Do not bing.
set colorcolumn=80	" Highlight column 80

" Define the list of hosts that use Windows Subsystem for Linux (WSL).
" These need special handling because WSL is not yet fully compatible.
let WSL_Hosts=['thorium', 'yggdrasil', 'dthor-lt']

" Remove all trailing whitespace on save.
function! <SID>StripTrailingWhitespace()
	let _save_pos = getpos(".")
	%s/\s\+$//e
	call setpos(".", _save_pos)
endfunction
autocmd BufWritePre * :call <SID>StripTrailingWhitespace()
map <leader>w :call <SID>StripTrailingWhitespace()<CR>

" Indenting
" ===========================================================================
" Defaults
set nowrap
set smartindent
set autoindent
set tabstop=8		" number of visual spaces per <TAB>
" set softtabstop=8	" number of spaces that <TAB< converts to when editing

" Python Files
autocmd BufNewFile,BufRead *.py
	\ set foldmethod=indent |
	\ set expandtab |
	\ set shiftwidth=4 |
	\ set softtabstop=4

" Javascript, HTML, and CSS
autocmd BufNewFile,BufRead *.js,*.html,*.css
	\ set expandtab |
	\ set tabstop=2 |
	\ set softtabstop=2 |
	\ set shiftwidth=2

" PowerShell
autocmd BufNewFile,BufRead *.ps1
	\ set expandtab |
	\ set tabstop=4 |
	\ set shiftwidth=4 |
	\ set softtabstop=4

" HTBasic
autocmd BufNewFile,BufRead *.htbasic
	\ set filetype=htbasic

" JSON
autocmd BufNewFile,BufRead *.json
	\ set expandtab |
	\ set tabstop=4 |
	\ set shiftwidth=4 |
	\ set softtabstop=4

" Search Settings
" ===========================================================================
set hlsearch		" Highlight matches
set incsearch		" Incremental search
set ignorecase		" Do case insensitive matching
set smartcase		" ...unless an uppercase is typed
" Make vim use normal regexes when searching...
nnoremap / /\v
vnoremap / /\v

" Commands
" ===========================================================================
let mapleader="\\"
" Map '\rr' to reload the .vimrc file.
map <leader>rr :source ~/.vim/vimrc<CR>

" Folding
" ===========================================================================
set foldenable			" Enable folding
set foldmethod=indent		" Fold based on indent
" set foldmethod=syntax		" Fold based on syntax
set foldnestmax=3		" Deepest fold is 3 levels
set foldlevel=5
" set nofoldenable		" Don't fold by default

" Press F9 to toggle a fold in any mode (insert, normal, o?, visual
inoremap <F9> <C-O>za
nnoremap <F9> za
onoremap <F9> <C-C>za
vnoremap <F9> zf

" Completion
" ===========================================================================

" Scrolling
" ===========================================================================
set scrolloff=8          " Start scrolling when 8 lines away from margins
set sidescrolloff=15     " or 15 columns away from the edge.


" ===========================================================================
" Plugins
" ===========================================================================

" Insallation via vim-plug
" ===========================================================================
call plug#begin('~/.vim/plugged')
Plug 'scrooloose/nerdcommenter'
Plug 'scrooloose/nerdtree'
Plug 'scrooloose/syntastic'
Plug 'altercation/vim-colors-solarized'
" YouCompeleteMe is 500MB...
" if index(WSL_Hosts, tolower($HOSTNAME)) < 0		" Don't install on WSL.
	" Plug 'valloric/youcompleteme'
" endif
Plug 'itchyny/lightline.vim'
Plug 'airblade/vim-gitgutter'
Plug 'dhruvasagar/vim-table-mode'
Plug 'tpope/vim-fugitive'
Plug 'rust-lang/rust.vim'
Plug 'stephpy/vim-yaml'
Plug 'pearofducks/ansible-vim'
Plug 'pprovost/vim-ps1'
Plug 'chrisbra/csv.vim'
Plug 'psf/black'
Plug 'nathanaelkane/vim-indent-guides'
Plug 'glench/vim-jinja2-syntax'
call plug#end()


" ===========================================================================
" Plugin Options
" ===========================================================================

" Rust.vim
" ===========================================================================
let g:rustfmt_autosave = 1

" NERD Commenter
" ===========================================================================
" Add spaces after comment delims
let g:NERDSpaceDelims = 1

" Align comments left instead of following code indentation
let g:NERDDefaultAlign = 1

" Comment and invert empty lines
let g:NERDCommentEmptyLines = 1

" Trim trailing whitespace when uncommenting
let g:NERDTrimTrailingWhitespace = 1

" Solarized
" ===========================================================================
let g:solarized_termcolors = 256
set background=dark
" colorscheme solarized

" YouCompleteMe
" ===========================================================================
if exists(':YcmCompleter')
	" Disable YouCompleteMe by default
	let g:ycm_auto_trigger=0

	" Add '\jd' and F12 as shortcuts for GoTo. F12 mimics Visual Studio
	nmap <leader>jd :YcmCompleter GoTo<CR>
	nmap <F12> :YcmCompleter GoTo<CR>

	" Add \y to disable the YouCompleteMe autotrigger and \Y to enable it.
	nnoremap <leader>y :let g:ycm_auto_trigger=0<CR>
	nnoremap <leader>Y :let g:ycm_auto_trigger=1<CR>
endif

" NERD Tree
" ===========================================================================
" Start NERDTree when VIM opens
" autocmd vimenter * NERDTree		" Turns out this is super annoying

" Default to showing hidden files and folders
let NERDTreeShowHidden=1

" Do not show vim swapfiles
let NERDTreeIgnore=['\.swp$']

" Syntastic
" ===========================================================================
set statusline+=%#warnings#
set statusline+=%{SyntasticStatuslineFlag()}
set statusline+=%*

let g:syntastic_always_populate_loc_list = 1
let g:syntastic_auto_loc_list = 1
let g:syntastic_check_on_open = 1
let g:syntastic_check_on_wq = 0

" Python
" Disable the 'python' checker becaus it compiles code.
" And don't use 'pylint' because it's far too picky.
let g:syntastic_python_checkers = ['flake8'] ", 'pylint']
" let g:syntastic_python_flake8_args = ''

" Table Mode
" ===========================================================================
" Use ReST-compatible tables
let g:table_mode_corner_corner="+"
let g:table_mode_header_fillchar="="

" LightLine
" ===========================================================================
let g:lightline = {
	\ 'colorscheme': 'wombat',
	\ 'active': {
	\   'left': [ [ 'mode' ],
	\	      [ 'fugitive', 'filename', 'modified' ] ]
	\ },
	\ 'separator': { 'left': '|', 'right': '|' },
	\ 'subseparator': { 'left': "|", 'right': "|" },
	\ 'component_function': {
	\   	'modified': 'LightlineModified',
	\ },
	\ 'component_expand': {
	\   'fugitive': 'LightlineFugitive',
	\ },
	\ 'component_type': {
	\   'fugitive': 'warning',
	\ },
	\ }

function! LightlineFugitive()
  return exists("*fugitive#head") ? fugitive#head() : ''
endfunction

function! LightlineModified()
  return &modified ? "+" : ''
endfunction

" Ansible-Vim
" ===========================================================================
" Force anything in a 'playbooks' folder to be considered Ansible.
au BufRead,BufNewFile */playbooks/*.yml set filetype=yaml.ansible

" Reset indent after two newlines
let g:ansbile_unindent_after_newline = 1

" Highlight things
let g:ansible_attribute_highlight = "ab"
let g:ansible_name_highlight = "b"
let g:ansible_extra_keywords_highlight = 1
let g:ansible_normal_keywords_highlight = 1
let g:ansible_with_keywords_highlight = 1

" Compat. with vim-yaml
let g:ansible_yamlKeyName = 'yamlKey'

" vim-indent-guides
" ---------------------------------------------------------------------------
let g:indent_guides_auto_colors = 0
let g:indent_guides_enable_on_vim_startup = 1
" Set the 1st, 3rd, 5th, etc. to be a very dark gray
" See the source code for /usr/bin/colortest-256 for values.
autocmd VimEnter,Colorscheme * :hi IndentGuidesOdd  ctermbg=233
" and the even ones to be a slightly lighter gray.
autocmd VimEnter,Colorscheme * :hi IndentGuidesEven ctermbg=235
" Only 'highlight' the 1st column of the guide, not the whole indent.
let g:indent_guides_guide_size = 1
" And do not color the 1st indent, since that's just the start of line.
let g:indent_guides_start_level = 2

" ===========================================================================
" End Plugins
" ===========================================================================

" Default color scheme
" ===========================================================================
" Use a built-in color schem so that things look nice even if the plugins
" can't load.
set background=dark
" Colors on Thorium (WSL) are not as good as PuTTY, so use a different
" colorscheme there.
if index(WSL_Hosts, tolower($HOSTNAME)) >= 0
	colorscheme elflord
else
	colorscheme desert
endif

" Colors for Diffs
" Lines added: green text with black BG
highlight DiffAdd    cterm=bold ctermfg=10 ctermbg=0
" Lines removed: red text with black BG
highlight DiffDelete cterm=bold ctermfg=9 ctermbg=0
" Lines that changed: Yellow text with black BG
highlight DiffChange cterm=bold ctermfg=11 ctermbg=0
" The specific text that changed within a line: White text with red BG
highlight DiffText   cterm=bold ctermfg=15 ctermbg=1
